from unittest import TestCase

from Crypto.PublicKey import RSA
from lib.xecrypt import XeCryptBnQw_SwapLeBe, XeCryptBnDw_SwapLeBe, XeCryptBnQw, XeCryptBnQw_toInt, XeCryptBnQwNeMod
from lib.xecrypt_rsa import XeCrypt_RSA

from lib.xecrypt import XeCryptRotSum, RotSumCtx
from lib.xecrypt import XeCryptRotSumSha


class TestXeCryptRotSumSha(TestCase):

    def test_normal(self):
        buffer1 = bytearray(0x40)
        for i in range(len(buffer1)):
            buffer1[i] = i % 255

        buffer2 = bytearray(0x40)
        for i in range(len(buffer2)):
            buffer2[i] = 255 - (i % 255)

        digest = bytes(
            [0x31, 0xf0, 0x0b, 0x77, 0x68, 0xf9, 0x57, 0x71, 0x8c, 0x4d, 0x62, 0x84, 0xb3, 0x45, 0xcd, 0xdd, 0x37, 0x9c,
             0x6e, 0xe9])
        self.assertEqual(XeCryptRotSumSha(buffer1, buffer2, 0x20), digest)

    def test_input_2_zero(self):
        buffer1 = bytearray(0x40)
        for i in range(len(buffer1)):
            buffer1[i] = i % 255

        buffer2 = bytearray(0x40)

        digest = bytes(
            [0x2a, 0xdb, 0xc2, 0x8c, 0xda, 0xca, 0x48, 0x8e, 0xa5, 0x01, 0x74, 0xa5, 0xd9, 0x80, 0x60, 0xc5, 0xf9, 0x0f,
             0x5d, 0x54])
        self.assertEqual(XeCryptRotSumSha(buffer1, buffer2, 0x20), digest)

    def test_input_all_zero(self):
        buffer1 = bytearray(0x40)
        buffer2 = bytearray(0x40)

        digest = bytes(
            [0x37, 0xd3, 0xb6, 0xb8, 0x4e, 0x35, 0x08, 0x0a, 0xe5, 0xf9, 0x60, 0xfd, 0xbf, 0x44, 0x26, 0x06, 0x54, 0x02,
             0x7e, 0x5b])
        self.assertEqual(XeCryptRotSumSha(buffer1, buffer2, 0x20), digest)


class TestXeCryptRotSum(TestCase):

    def test_launch_xex(self):

        input_1_size = 0x70
        input_1 = bytearray(
            [0x00, 0x00, 0x01, 0x74, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0xfc, 0xa0, 0x61, 0xd4,
             0xc2, 0xa1, 0x71, 0xc0, 0xec, 0x98, 0x00, 0x86, 0xe6, 0x8b, 0xa8, 0x9f, 0xb0, 0x9c, 0x83, 0xd4,
             0x00, 0x00, 0x00, 0x02, 0x47, 0x88, 0x8f, 0x6a, 0x94, 0x36, 0x58, 0xc0, 0x7a, 0xdf, 0xeb, 0xda,
             0x44, 0x13, 0x4a, 0x7f, 0xe0, 0xd2, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xd8, 0x0b, 0xfa, 0xf3, 0xdc, 0x53, 0xb0,
             0x89, 0x7d, 0x5e, 0xb5, 0x08, 0xd0, 0x10, 0x63, 0x00, 0x00, 0x00, 0x00, 0xca, 0xe2, 0xc7, 0x20,
             0xef, 0xb2, 0x9a, 0x1d, 0x2e, 0x90, 0xe4, 0x7e, 0xb9, 0xdf, 0x41, 0xa0, 0xf5, 0xf5, 0xb7, 0xa4])

        rotsum_ctx = RotSumCtx([0] * 4)

        output = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xb2, 0x51, 0xdc, 0xa2, 0xc4, 0x60, 0xa3, 0x5d,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xd8, 0x2d, 0xc6, 0x4e, 0xec, 0xd3, 0xea, 0x24])

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEqual(bytes(rotsum_ctx), output)

    def test_launch_xex_zero_all(self):

        input_1_size = 0x0
        input_1 = []

        output = bytes([0x0] * 0x20)

        rotsum_ctx = RotSumCtx.from_bytes(output)

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEqual(bytes(rotsum_ctx), output)

    def test_launch_xex_zero_input(self):

        input_1_size = 0x0
        input_1 = []

        output = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xb2, 0x51, 0xdc, 0xa2, 0xc4, 0x60, 0xa3, 0x5d,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xd8, 0x2d, 0xc6, 0x4e, 0xec, 0xd3, 0xea, 0x24])

        rotsum_ctx = RotSumCtx.from_bytes(output)

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEqual(bytes(rotsum_ctx), output)

    def test_normal(self):

        input_1_size = 0x40

        input_1_bytes = bytearray(
            [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
             0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
             0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f])

        input_1 = bytearray(input_1_size)
        for i in range(input_1_size):
            input_1[i] = i % 255

        self.assertEqual(input_1_bytes, input_1)

        rotsum_ctx = RotSumCtx([0] * 4)

        output = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x62, 0xe0, 0xd8, 0xd7, 0xd3, 0xc3, 0x83,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x6d, 0x14, 0x14, 0x14, 0x19, 0x69, 0x69, 0x69])

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEqual(bytes(rotsum_ctx), output)

    def test_normal_2(self):

        input_2_size = 0x40

        input_2_bytes = bytearray(
            [0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
             0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
             0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
             0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0])

        input_2 = bytearray(input_2_size)
        for i in range(input_2_size):
            input_2[i] = 255 - (i % 255)

        self.assertEqual(input_2_bytes, input_2)

        output_1 = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x83, 0x62, 0xe0, 0xd8, 0xd7, 0xd3, 0xc3, 0x83,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb,
                          0x6d, 0x14, 0x14, 0x14, 0x19, 0x69, 0x69, 0x69])

        rotsum_ctx = RotSumCtx.from_bytes(output_1)

        output_2 = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                          0x50, 0x60, 0x61, 0xaa, 0x6a, 0x8b, 0x0d, 0x54,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
                          0x52, 0x59, 0x00, 0x00, 0xa4, 0xb0, 0x00, 0x00])

        XeCryptRotSum(rotsum_ctx, input_2, input_2_size >> 3)

        self.assertEqual(bytes(rotsum_ctx), output_2)


class TestXeCryptBnQw_SwapLeBe(TestCase):

    def test_normal_1(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 1),
            bytes([0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]))

    def test_normal_2(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 3),
            bytes([0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
                   0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
                   0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]))

    def test_zero(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 1),
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))

    def test_one(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
        bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 1),
        bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]))

class TestXeCryptBnDw_SwapLeBe(TestCase):

    def test_normal_1(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 2),
            bytes([0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05, ]))

    def test_normal_2(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 6),
            bytes([0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05,
                   0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05,
                   0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05]))

    def test_zero(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 2),
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))

    def test_one(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 2),
            bytes([0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00]))


class TestXeCryptBnQw(TestCase):

    def test_rsa(self):
        rsa_obj = RSA.generate(1024)

        p_old_bn = XeCryptBnQw(rsa_obj.p, 64)
        self.assertEqual(XeCryptBnQw_toInt(p_old_bn), rsa_obj.p)

        n_old_bn = XeCryptBnQw(rsa_obj.n, 128)
        self.assertEqual(XeCryptBnQw_toInt(n_old_bn), rsa_obj.n)

    def test_xersa(self):
        rsa_obj = RSA.generate(1024)
        xecrypt_obj = XeCrypt_RSA.from_rsa_obj(rsa_obj)

        p_old_bn = XeCryptBnQw(xecrypt_obj.p, 64)
        self.assertEqual(XeCryptBnQw_toInt(p_old_bn), xecrypt_obj.p)

        n_old_bn = XeCryptBnQw(xecrypt_obj.n, 128)
        self.assertEqual(XeCryptBnQw_toInt(n_old_bn), xecrypt_obj.n)


class TestXeCryptBnQwNeMod(TestCase):

    def test_normal(self):
        r3 = bytes([
            0xf5, 0xbf, 0x46, 0xe4, 0x34, 0xf1, 0x73, 0x3c, 0xef, 0x6d, 0x46, 0x91, 0x3d, 0x75, 0x08, 0xcf,
            0x3f, 0x09, 0x57, 0xcd, 0x7e, 0xe5, 0x1a, 0xa9, 0x7d, 0x83, 0x99, 0xf8, 0xf6, 0xe9, 0x58, 0x39,
            0xa5, 0x37, 0xf0, 0x6c, 0x56, 0xa7, 0xef, 0x33, 0xe8, 0x11, 0x23, 0x26, 0x1b, 0x94, 0x9e, 0xc8,
            0xcc, 0x30, 0x81, 0x7b, 0x21, 0x9f, 0x6c, 0x54, 0x39, 0x20, 0x35, 0x88, 0xbb, 0xe1, 0x98, 0xf6,
            0x62, 0x6c, 0xa9, 0x28, 0x65, 0xd4, 0x70, 0xe8, 0x40, 0xb2, 0xd5, 0x3d, 0x94, 0x9d, 0x45, 0x27,
            0x0c, 0xc9, 0xf4, 0x09, 0x24, 0x12, 0x08, 0x59, 0xaf, 0x7c, 0xd2, 0xf3, 0xc4, 0x9a, 0xcd, 0x3d,
            0x6c, 0xe7, 0xe9, 0x6f, 0x22, 0x49, 0x18, 0x1e, 0x40, 0x72, 0x0b, 0x80, 0x47, 0x49, 0x52, 0x5f,
            0x33, 0x70, 0x77, 0xff, 0xbb, 0xc4, 0xf4, 0xb5, 0xdb, 0xbb, 0x3f, 0x02, 0x55, 0x73, 0xe9, 0x34,
            0xa1, 0x99, 0x04, 0xc0, 0x43, 0xef, 0x73, 0x4e, 0xc6, 0xaa, 0xc7, 0xe1, 0x07, 0x92, 0xb7, 0x18,
            0x84, 0x2f, 0x0d, 0x44, 0xa1, 0x5f, 0xe6, 0x7c, 0x15, 0x43, 0xbe, 0xa4, 0x16, 0x15, 0x03, 0xd0,
            0x12, 0x7a, 0x3a, 0xeb, 0xdc, 0xf1, 0x7e, 0x2d, 0x05, 0x5e, 0xb9, 0x21, 0xbe, 0x4e, 0xeb, 0xf9,
            0x78, 0x69, 0x40, 0x7f, 0x38, 0xe8, 0x19, 0xe2, 0x41, 0x45, 0xbf, 0x0c, 0x5f, 0xa8, 0x8c, 0xdc,
            0x1e, 0x52, 0x0e, 0x37, 0x7a, 0x39, 0xd7, 0x6a, 0x5e, 0x65, 0x06, 0x8c, 0x85, 0x5d, 0x0a, 0xc9,
            0xb4, 0xfd, 0xfe, 0x31, 0x6e, 0x8c, 0x0d, 0x7d, 0xa1, 0xad, 0x20, 0x6e, 0xe9, 0x57, 0xa0, 0xd7,
            0x36, 0x0b, 0x2a, 0x0b, 0x2e, 0x92, 0xb3, 0xdf, 0x18, 0x30, 0x6a, 0x93, 0xd5, 0x9e, 0x0c, 0xa9,
            0xf1, 0xfe, 0x6a, 0x2d, 0x8b, 0x92, 0x7d, 0x39, 0x3c, 0xd0, 0x23, 0x2f, 0xd7, 0x70, 0x37, 0xf7,
            0x4a, 0xf1, 0xee, 0x3e, 0xe1, 0x2c, 0xbc, 0x97, 0xd8, 0x2d, 0xf1, 0x5b, 0xb0, 0x2e, 0xea, 0xaf,
        ])  # Unchanged
        r4 = bytes([
            0x4a, 0xf1, 0xee, 0x3e, 0xe1, 0x2c, 0xbc, 0x97, 0xd8, 0x2d, 0xf1, 0x5b, 0xb0, 0x2e, 0xea, 0xaf,
            0x0e, 0xec, 0x36, 0xd2, 0x0a, 0xf8, 0x57, 0x65, 0x2b, 0x49, 0x76, 0x1c, 0x40, 0x3e, 0x45, 0x2e,
            0x30, 0x27, 0x90, 0xf4, 0x26, 0x42, 0x4a, 0x4c, 0xaf, 0x75, 0xe8, 0x98, 0x79, 0xa7, 0x3e, 0x44,
            0x03, 0x03, 0xd9, 0x86, 0xb3, 0xef, 0x13, 0xdf, 0xcd, 0x10, 0xf1, 0xe5, 0x63, 0x6b, 0xcd, 0x2a,
            0x30, 0xe4, 0xa2, 0x16, 0xcf, 0xb7, 0xd5, 0x7c, 0x1b, 0xb0, 0x49, 0xb0, 0x4f, 0xc4, 0xd5, 0x8c,
            0x8d, 0xd8, 0x3c, 0x81, 0xe8, 0xa1, 0x73, 0xee, 0x76, 0xb8, 0xb8, 0x49, 0x4d, 0x0b, 0x37, 0x42,
            0x70, 0x4e, 0x08, 0x43, 0x2d, 0xdb, 0xf2, 0x37, 0xfe, 0x82, 0xcf, 0xc2, 0x99, 0xc4, 0xa1, 0xa9,
            0xbd, 0x8b, 0xc0, 0x0e, 0x88, 0x87, 0xcd, 0x82, 0x1c, 0x75, 0x82, 0x62, 0x16, 0x77, 0xc6, 0xfa,
            0x19, 0x5c, 0x04, 0xa7, 0x98, 0x40, 0x05, 0xbf, 0xf1, 0x98, 0x9b, 0xd8, 0x00, 0x95, 0x4a, 0x2a,
            0xea, 0x45, 0x5b, 0xb9, 0x89, 0x94, 0x9e, 0x07, 0xb8, 0xb5, 0x86, 0x6c, 0x9d, 0xb9, 0xc6, 0xef,
            0xc0, 0x45, 0x7b, 0x3b, 0xaf, 0x32, 0x53, 0x63, 0xd1, 0x49, 0x58, 0xe0, 0xda, 0x9b, 0x96, 0x86,
            0x1a, 0xfa, 0xac, 0xaf, 0x66, 0xee, 0x49, 0x0c, 0x37, 0x01, 0x60, 0x8f, 0xca, 0x80, 0x71, 0xfd,
            0x2c, 0x35, 0x59, 0xd8, 0x3d, 0xfe, 0xf8, 0xef, 0x0f, 0x3d, 0x12, 0x28, 0xef, 0x6c, 0xf3, 0xad,
            0x76, 0x33, 0x37, 0x4f, 0xae, 0x1d, 0x59, 0xe3, 0xdc, 0x14, 0x88, 0x46, 0xa6, 0x96, 0x4a, 0xb8,
            0xee, 0x6b, 0x74, 0xf4, 0x46, 0x13, 0x04, 0x45, 0xb1, 0x96, 0xc3, 0xca, 0x98, 0xcb, 0xe0, 0x9b,
            0x53, 0x5f, 0xd1, 0xf9, 0x78, 0x0a, 0x90, 0x46, 0xd7, 0xb3, 0x49, 0x2a, 0x5b, 0x89, 0x91, 0x1f,
            0x65, 0x49, 0x51, 0xf7, 0xea, 0x7b, 0x30, 0x57, 0x01, 0x72, 0xe2, 0x45, 0xe8, 0x42, 0xea, 0xd3
        ])
        r5 = bytes([
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ])
        r5out = bytes([
            0xf5, 0xbf, 0x46, 0xe4, 0x34, 0xf1, 0x73, 0x3c, 0xef, 0x6d, 0x46, 0x91, 0x3d, 0x75, 0x08, 0xcf,
            0x3f, 0x09, 0x57, 0xcd, 0x7e, 0xe5, 0x1a, 0xa9, 0x7d, 0x83, 0x99, 0xf8, 0xf6, 0xe9, 0x58, 0x39,
            0xa5, 0x37, 0xf0, 0x6c, 0x56, 0xa7, 0xef, 0x33, 0xe8, 0x11, 0x23, 0x26, 0x1b, 0x94, 0x9e, 0xc8,
            0xcc, 0x30, 0x81, 0x7b, 0x21, 0x9f, 0x6c, 0x54, 0x39, 0x20, 0x35, 0x88, 0xbb, 0xe1, 0x98, 0xf6,
            0x62, 0x6c, 0xa9, 0x28, 0x65, 0xd4, 0x70, 0xe8, 0x40, 0xb2, 0xd5, 0x3d, 0x94, 0x9d, 0x45, 0x27,
            0x0c, 0xc9, 0xf4, 0x09, 0x24, 0x12, 0x08, 0x59, 0xaf, 0x7c, 0xd2, 0xf3, 0xc4, 0x9a, 0xcd, 0x3d,
            0x6c, 0xe7, 0xe9, 0x6f, 0x22, 0x49, 0x18, 0x1e, 0x40, 0x72, 0x0b, 0x80, 0x47, 0x49, 0x52, 0x5f,
            0x33, 0x70, 0x77, 0xff, 0xbb, 0xc4, 0xf4, 0xb5, 0xdb, 0xbb, 0x3f, 0x02, 0x55, 0x73, 0xe9, 0x34,
            0xa1, 0x99, 0x04, 0xc0, 0x43, 0xef, 0x73, 0x4e, 0xc6, 0xaa, 0xc7, 0xe1, 0x07, 0x92, 0xb7, 0x18,
            0x84, 0x2f, 0x0d, 0x44, 0xa1, 0x5f, 0xe6, 0x7c, 0x15, 0x43, 0xbe, 0xa4, 0x16, 0x15, 0x03, 0xd0,
            0x12, 0x7a, 0x3a, 0xeb, 0xdc, 0xf1, 0x7e, 0x2d, 0x05, 0x5e, 0xb9, 0x21, 0xbe, 0x4e, 0xeb, 0xf9,
            0x78, 0x69, 0x40, 0x7f, 0x38, 0xe8, 0x19, 0xe2, 0x41, 0x45, 0xbf, 0x0c, 0x5f, 0xa8, 0x8c, 0xdc,
            0x1e, 0x52, 0x0e, 0x37, 0x7a, 0x39, 0xd7, 0x6a, 0x5e, 0x65, 0x06, 0x8c, 0x85, 0x5d, 0x0a, 0xc9,
            0xb4, 0xfd, 0xfe, 0x31, 0x6e, 0x8c, 0x0d, 0x7d, 0xa1, 0xad, 0x20, 0x6e, 0xe9, 0x57, 0xa0, 0xd7,
            0x36, 0x0b, 0x2a, 0x0b, 0x2e, 0x92, 0xb3, 0xdf, 0x18, 0x30, 0x6a, 0x93, 0xd5, 0x9e, 0x0c, 0xa9,
            0xf1, 0xfe, 0x6a, 0x2d, 0x8b, 0x92, 0x7d, 0x39, 0x3c, 0xd0, 0x23, 0x2f, 0xd7, 0x70, 0x37, 0xf7,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ])

        self.assertEqual(XeCryptBnQwNeMod(r3, r4, 0x20, 0x20), r5out)

    def test_normal_2(self):
        r3 = bytes([
            0x93, 0x25, 0x50, 0x3e, 0xa5, 0xd4, 0x78, 0x10, 0x49, 0x8b, 0x32, 0x53, 0x33, 0x49, 0xf6, 0xbf,
            0x4d, 0xf5, 0x1e, 0xaf, 0x72, 0xa8, 0x0b, 0x35, 0xc2, 0x53, 0xcd, 0xd8, 0x67, 0x71, 0xd2, 0x5a,
            0x38, 0xf9, 0x65, 0xdd, 0x8f, 0x2c, 0xfd, 0xf9, 0x02, 0x2b, 0x3e, 0xeb, 0x9d, 0xc5, 0x0d, 0x9c,
            0x72, 0x5f, 0x53, 0x7f, 0xf6, 0x84, 0x6d, 0x25, 0x88, 0x27, 0x55, 0x47, 0xad, 0x90, 0x03, 0x84,
            0xb4, 0xdc, 0xe8, 0x16, 0x70, 0x8f, 0xdb, 0xeb, 0xc5, 0x7a, 0xa7, 0xc2, 0xcd, 0xe8, 0xf1, 0xc8,
            0x7e, 0x4f, 0xea, 0xaf, 0xdf, 0xe8, 0x1b, 0xa8, 0xbe, 0xb4, 0xb1, 0xba, 0x00, 0x3e, 0xb5, 0x94,
            0x6c, 0x1c, 0xff, 0x71, 0x53, 0x8f, 0x1a, 0x31, 0x32, 0xab, 0x34, 0xa7, 0x13, 0xce, 0x74, 0x37,
            0x6b, 0xf8, 0x2a, 0xa3, 0xde, 0xe7, 0x6d, 0x3d, 0x22, 0x8c, 0x88, 0xf4, 0xc5, 0x74, 0x39, 0x92,
            0x0c, 0xed, 0x7f, 0x75, 0x65, 0xc2, 0xcb, 0x75, 0xbf, 0x85, 0x20, 0x33, 0x70, 0xeb, 0x37, 0x80,
            0x43, 0xc8, 0x17, 0xd9, 0x37, 0xe6, 0x08, 0x0c, 0xfd, 0xb1, 0x7d, 0x94, 0x87, 0x36, 0x15, 0xf8,
            0x3c, 0xeb, 0x73, 0x45, 0x31, 0xa5, 0xde, 0xca, 0xf3, 0xaa, 0x02, 0xed, 0xfa, 0x9f, 0xb1, 0xb9,
            0x9e, 0xc4, 0xb1, 0x2b, 0x4f, 0x5e, 0x6f, 0xda, 0xc6, 0xe9, 0x29, 0x8f, 0xc0, 0x73, 0xee, 0x7d,
            0xf3, 0x05, 0x9b, 0xbb, 0xc9, 0x9f, 0x1e, 0x8c, 0x85, 0x8a, 0x39, 0xa3, 0xd6, 0xc7, 0xe7, 0x33,
            0xe4, 0xfb, 0x5a, 0x29, 0xd4, 0x2e, 0x5c, 0x0e, 0xf5, 0x72, 0x9a, 0xe1, 0x2e, 0xb4, 0x86, 0xaf,
            0xae, 0x07, 0x81, 0xa7, 0x0e, 0xb3, 0x76, 0xd2, 0xa9, 0xcf, 0xc3, 0xe6, 0x65, 0x89, 0x27, 0x4b,
            0xf0, 0x7f, 0x2f, 0xe1, 0x2d, 0x72, 0x96, 0xc0, 0xeb, 0xdf, 0xbf, 0x66, 0x98, 0xb4, 0x9e, 0x3e,
            0x44, 0x2b, 0x95, 0x32, 0x0d, 0x2a, 0x7b, 0x5f, 0x63, 0x94, 0x84, 0x6e, 0x71, 0x7a, 0xed, 0x76,
            0x10, 0xe0, 0xd6, 0xba, 0x49, 0x9c, 0x59, 0x1e, 0x62, 0xbf, 0x29, 0xfb, 0xca, 0xc2, 0x39, 0x42,
            0xff, 0x76, 0x5f, 0x04, 0x47, 0xbf, 0x60, 0x43, 0x8d, 0x6d, 0x09, 0x92, 0x51, 0x2f, 0x63, 0x9f,
            0x62, 0xe4, 0xd2, 0x95, 0x25, 0x19, 0xa4, 0xd8, 0x93, 0xe1, 0xf2, 0x91, 0x9b, 0xdd, 0x45, 0x90,
            0xe6, 0x4a, 0xe0, 0x85, 0x01, 0x89, 0x05, 0xde, 0xcf, 0xeb, 0xe0, 0x62, 0x31, 0xf1, 0xeb, 0xc4,
            0x00, 0xf4, 0x85, 0xae, 0xee, 0xa5, 0x9b, 0x3d, 0xbf, 0x32, 0xaa, 0x51, 0xaa, 0x5c, 0xf7, 0xf3,
            0x27, 0x47, 0xa9, 0x29, 0xa6, 0x87, 0xa8, 0x15, 0xe9, 0xe2, 0x2f, 0x5a, 0xaf, 0xd3, 0x4f, 0xb1,
            0x6f, 0x47, 0x3c, 0x24, 0x3d, 0xc9, 0x83, 0x4e, 0x27, 0x51, 0x41, 0x0f, 0x44, 0xb8, 0xf5, 0x88,
            0xfa, 0x1e, 0xeb, 0x26, 0x80, 0x99, 0x08, 0x24, 0x37, 0xed, 0x77, 0x75, 0xa6, 0x8b, 0x45, 0x25,
            0x85, 0x27, 0x85, 0x7b, 0xa5, 0x3c, 0x41, 0x84, 0xb6, 0x42, 0xc7, 0x01, 0xeb, 0x40, 0x2e, 0x3c,
            0x3a, 0xf4, 0xf2, 0x27, 0xfe, 0x2c, 0x40, 0x6f, 0x79, 0x17, 0xd8, 0x47, 0x6e, 0x87, 0x34, 0x55,
            0x14, 0xc1, 0x47, 0x24, 0x0b, 0x2b, 0xa1, 0x20, 0x1f, 0x35, 0x4e, 0x5e, 0x37, 0xff, 0x6a, 0x3e,
            0x3e, 0x67, 0xe4, 0xa1, 0xb0, 0x0b, 0xd4, 0x26, 0xe6, 0x45, 0x7c, 0xee, 0x68, 0xa9, 0x87, 0xd5,
            0x74, 0xbf, 0x16, 0x21, 0xb7, 0xc0, 0x71, 0xea, 0x8c, 0xf3, 0x19, 0x1e, 0x52, 0x7a, 0x69, 0xf4,
            0xd0, 0xeb, 0x45, 0xa8, 0xa4, 0x7a, 0x22, 0x8f, 0x24, 0xc0, 0x2a, 0x80, 0x38, 0xd2, 0x88, 0x82,
            0x4b, 0x5f, 0xa6, 0x8b, 0xf2, 0x11, 0x40, 0x07, 0x15, 0xcb, 0x22, 0xa1, 0xd7, 0x0e, 0x1c, 0x25,
        ])  # Unchanged
        r4 = bytes([
            0x4a, 0xf1, 0xee, 0x3e, 0xe1, 0x2c, 0xbc, 0x97, 0xd8, 0x2d, 0xf1, 0x5b, 0xb0, 0x2e, 0xea, 0xaf,
            0x0e, 0xec, 0x36, 0xd2, 0x0a, 0xf8, 0x57, 0x65, 0x2b, 0x49, 0x76, 0x1c, 0x40, 0x3e, 0x45, 0x2e,
            0x30, 0x27, 0x90, 0xf4, 0x26, 0x42, 0x4a, 0x4c, 0xaf, 0x75, 0xe8, 0x98, 0x79, 0xa7, 0x3e, 0x44,
            0x03, 0x03, 0xd9, 0x86, 0xb3, 0xef, 0x13, 0xdf, 0xcd, 0x10, 0xf1, 0xe5, 0x63, 0x6b, 0xcd, 0x2a,
            0x30, 0xe4, 0xa2, 0x16, 0xcf, 0xb7, 0xd5, 0x7c, 0x1b, 0xb0, 0x49, 0xb0, 0x4f, 0xc4, 0xd5, 0x8c,
            0x8d, 0xd8, 0x3c, 0x81, 0xe8, 0xa1, 0x73, 0xee, 0x76, 0xb8, 0xb8, 0x49, 0x4d, 0x0b, 0x37, 0x42,
            0x70, 0x4e, 0x08, 0x43, 0x2d, 0xdb, 0xf2, 0x37, 0xfe, 0x82, 0xcf, 0xc2, 0x99, 0xc4, 0xa1, 0xa9,
            0xbd, 0x8b, 0xc0, 0x0e, 0x88, 0x87, 0xcd, 0x82, 0x1c, 0x75, 0x82, 0x62, 0x16, 0x77, 0xc6, 0xfa,
            0x19, 0x5c, 0x04, 0xa7, 0x98, 0x40, 0x05, 0xbf, 0xf1, 0x98, 0x9b, 0xd8, 0x00, 0x95, 0x4a, 0x2a,
            0xea, 0x45, 0x5b, 0xb9, 0x89, 0x94, 0x9e, 0x07, 0xb8, 0xb5, 0x86, 0x6c, 0x9d, 0xb9, 0xc6, 0xef,
            0xc0, 0x45, 0x7b, 0x3b, 0xaf, 0x32, 0x53, 0x63, 0xd1, 0x49, 0x58, 0xe0, 0xda, 0x9b, 0x96, 0x86,
            0x1a, 0xfa, 0xac, 0xaf, 0x66, 0xee, 0x49, 0x0c, 0x37, 0x01, 0x60, 0x8f, 0xca, 0x80, 0x71, 0xfd,
            0x2c, 0x35, 0x59, 0xd8, 0x3d, 0xfe, 0xf8, 0xef, 0x0f, 0x3d, 0x12, 0x28, 0xef, 0x6c, 0xf3, 0xad,
            0x76, 0x33, 0x37, 0x4f, 0xae, 0x1d, 0x59, 0xe3, 0xdc, 0x14, 0x88, 0x46, 0xa6, 0x96, 0x4a, 0xb8,
            0xee, 0x6b, 0x74, 0xf4, 0x46, 0x13, 0x04, 0x45, 0xb1, 0x96, 0xc3, 0xca, 0x98, 0xcb, 0xe0, 0x9b,
            0x53, 0x5f, 0xd1, 0xf9, 0x78, 0x0a, 0x90, 0x46, 0xd7, 0xb3, 0x49, 0x2a, 0x5b, 0x89, 0x91, 0x1f,
            0x65, 0x49, 0x51, 0xf7, 0xea, 0x7b, 0x30, 0x57, 0x01, 0x72, 0xe2, 0x45, 0xe8, 0x42, 0xea, 0xd3
        ])
        r5 = bytes([
            0xe8, 0x23, 0x02, 0xdc, 0xb7, 0x69, 0x2a, 0xbc, 0x4d, 0x8c, 0xae, 0x8b, 0x45, 0x1f, 0x2f, 0xa9,
            0xc7, 0x5e, 0xfe, 0xb7, 0x15, 0x7b, 0x09, 0xac, 0x84, 0x92, 0x21, 0x5a, 0xfa, 0x22, 0x51, 0x87,
            0xe4, 0xf0, 0xa2, 0x38, 0x87, 0x86, 0x28, 0x50, 0x29, 0xd2, 0x38, 0x47, 0x4f, 0x97, 0x37, 0x8c,
            0x34, 0xb3, 0x0b, 0x79, 0xa9, 0xc2, 0x86, 0x8f, 0xfb, 0xb5, 0xfe, 0x0e, 0x51, 0x0e, 0x1d, 0x9b,
            0xfb, 0xb7, 0x5a, 0x45, 0x10, 0x1a, 0xdb, 0x25, 0x46, 0x9d, 0x7b, 0x0a, 0xc0, 0x53, 0x25, 0xec,
            0x7e, 0x18, 0x1a, 0xbe, 0xa4, 0xe6, 0xf3, 0xdb, 0x63, 0x58, 0x5b, 0xeb, 0xc0, 0xc0, 0xfd, 0x1f,
            0x74, 0x5c, 0x31, 0x78, 0x7e, 0xbe, 0x17, 0xc2, 0xe5, 0x54, 0x0b, 0x1f, 0x75, 0x70, 0xba, 0x17,
            0x67, 0x5b, 0x0b, 0x16, 0xa1, 0x66, 0x5d, 0x30, 0x41, 0x65, 0x03, 0x62, 0xac, 0x3e, 0x84, 0x5b,
            0xef, 0x7f, 0xf8, 0x0a, 0x90, 0x7c, 0xdb, 0xb9, 0x34, 0x67, 0xf2, 0xaf, 0x00, 0xef, 0x49, 0x33,
            0x6b, 0xf0, 0x07, 0xf0, 0x8d, 0x6e, 0x66, 0x30, 0x18, 0xa8, 0x9e, 0x53, 0xb4, 0x3b, 0xc5, 0xfb,
            0xbc, 0x31, 0x00, 0xb9, 0x0b, 0x6d, 0x9e, 0x44, 0xbd, 0x6f, 0x20, 0x6f, 0x29, 0x84, 0xb5, 0x15,
            0x31, 0x02, 0x24, 0x39, 0x17, 0xf7, 0x1c, 0x35, 0xc7, 0x0b, 0x7a, 0x70, 0x21, 0xe6, 0x53, 0x80,
            0x56, 0x78, 0x27, 0x3c, 0xa0, 0xaa, 0x86, 0x4f, 0x6d, 0xfe, 0x5b, 0x3e, 0x09, 0x8c, 0xb3, 0x9e,
            0x5d, 0x0a, 0x0a, 0x17, 0xaf, 0xf1, 0x19, 0x60, 0x6b, 0xff, 0x2f, 0xc8, 0x55, 0x9c, 0x6c, 0x08,
            0xe2, 0x72, 0x7b, 0xc9, 0x23, 0x6a, 0xb6, 0x78, 0xa2, 0xb4, 0x9d, 0x3f, 0xee, 0x60, 0xb7, 0xad,
            0x35, 0xcc, 0xbb, 0x6c, 0x91, 0xb0, 0xc4, 0xe9, 0x5b, 0xbe, 0x0f, 0x5a, 0x9a, 0x9f, 0xb9, 0x90,
            0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x80, 0x23, 0x03, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x70, 0x04, 0xfd, 0x60, 0x82, 0x01, 0x94, 0x20, 0x78, 0x1e, 0x12, 0xc0,
            0x70, 0x04, 0xff, 0x50, 0x81, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0x80,
            0x28, 0x00, 0x00, 0x82, 0x80, 0x09, 0xad, 0xbc, 0x80, 0x09, 0x88, 0x74, 0x80, 0x0a, 0x18, 0xe0,
            0x70, 0x04, 0xfe, 0x00, 0x78, 0x1a, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x82, 0x01, 0x02, 0xd0,
            0x70, 0x04, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x23, 0x01, 0x48,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x12, 0xd0, 0xff, 0xff, 0xff, 0xff, 0x81, 0x5f, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x0f, 0x80, 0x81, 0x75, 0x93, 0xa0, 0x80, 0x0a, 0x18, 0xe0,
            0x70, 0x04, 0xfe, 0x60, 0x81, 0x75, 0xdc, 0x30, 0x00, 0x00, 0x00, 0x00, 0x82, 0x01, 0x02, 0xd0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x23, 0x01, 0x48,
        ])
        r5out = bytes([
            0x79, 0x67, 0x0d, 0x33, 0x3b, 0x82, 0x4d, 0x68, 0x66, 0x5a, 0x26, 0x47, 0x5c, 0x06, 0x13, 0xf6,
            0x36, 0x1a, 0x0a, 0x85, 0x3b, 0xa8, 0x16, 0x1f, 0xef, 0x06, 0xe2, 0x26, 0x3b, 0x28, 0x45, 0x8c,
            0xe3, 0xab, 0x11, 0x58, 0x43, 0x1f, 0xe5, 0x05, 0x9e, 0x27, 0x8a, 0xad, 0xc0, 0xc7, 0x66, 0x5f,
            0x17, 0xea, 0x78, 0x90, 0x9c, 0xb6, 0xea, 0x09, 0xce, 0xe5, 0x22, 0xa2, 0xca, 0xe0, 0x72, 0xe1,
            0xd8, 0xe7, 0x04, 0xc0, 0x1f, 0x57, 0x6c, 0x5e, 0xb2, 0x5d, 0xe0, 0x06, 0x16, 0x5b, 0xf7, 0x42,
            0x77, 0x57, 0x20, 0x5b, 0xb4, 0x05, 0x26, 0xef, 0x07, 0x52, 0x35, 0xc8, 0xe8, 0x06, 0x93, 0xaf,
            0xca, 0x04, 0xd7, 0x04, 0xe6, 0x0d, 0xd4, 0xf6, 0x6a, 0x97, 0x6f, 0x95, 0x17, 0x48, 0x63, 0xe9,
            0xb8, 0x57, 0xa8, 0x1e, 0x88, 0x68, 0xa6, 0x0c, 0xbd, 0x5a, 0xc5, 0x40, 0x8b, 0x67, 0x4f, 0xef,
            0x90, 0x61, 0x3b, 0x15, 0xc3, 0xb2, 0xd8, 0x4d, 0x2c, 0x46, 0x93, 0x0e, 0x11, 0xa4, 0x73, 0x03,
            0x69, 0x69, 0xa4, 0x8a, 0xa8, 0x0a, 0x99, 0x88, 0x97, 0xdc, 0xcd, 0xbe, 0x75, 0xdb, 0xce, 0xb9,
            0x15, 0x47, 0x43, 0x2d, 0x05, 0x55, 0xab, 0x94, 0xd1, 0x7d, 0xda, 0x52, 0x2a, 0x02, 0x01, 0x69,
            0x2d, 0xfd, 0xa6, 0x2c, 0x2f, 0xbb, 0xba, 0x7d, 0x39, 0xf8, 0x86, 0x26, 0xcd, 0x4a, 0xb5, 0x03,
            0x2c, 0xa6, 0x87, 0x99, 0xca, 0x8f, 0xc3, 0x58, 0x9a, 0x06, 0xb7, 0x80, 0xad, 0xbb, 0x21, 0x55,
            0x49, 0x66, 0xb2, 0x38, 0xc8, 0x96, 0xfc, 0xbf, 0x74, 0x2f, 0x95, 0x9d, 0xbb, 0xf7, 0x58, 0x32,
            0x69, 0x3d, 0x87, 0x57, 0xb2, 0x76, 0xef, 0x25, 0x42, 0xf1, 0x2d, 0x6e, 0x27, 0x57, 0x6e, 0xa0,
            0x1f, 0x5e, 0xd7, 0xfb, 0x08, 0x79, 0xd3, 0x28, 0x97, 0xa3, 0x1b, 0xaa, 0xd0, 0x1e, 0x24, 0x60,
            0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x80, 0x23, 0x03, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x70, 0x04, 0xfd, 0x60, 0x82, 0x01, 0x94, 0x20, 0x78, 0x1e, 0x12, 0xc0,
            0x70, 0x04, 0xff, 0x50, 0x81, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0x80,
            0x28, 0x00, 0x00, 0x82, 0x80, 0x09, 0xad, 0xbc, 0x80, 0x09, 0x88, 0x74, 0x80, 0x0a, 0x18, 0xe0,
            0x70, 0x04, 0xfe, 0x00, 0x78, 0x1a, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x82, 0x01, 0x02, 0xd0,
            0x70, 0x04, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x23, 0x01, 0x48,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x12, 0xd0, 0xff, 0xff, 0xff, 0xff, 0x81, 0x5f, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x0f, 0x80, 0x81, 0x75, 0x93, 0xa0, 0x80, 0x0a, 0x18, 0xe0,
            0x70, 0x04, 0xfe, 0x60, 0x81, 0x75, 0xdc, 0x30, 0x00, 0x00, 0x00, 0x00, 0x82, 0x01, 0x02, 0xd0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b,
            0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x23, 0x01, 0x48,
        ])

        self.assertEqual(XeCryptBnQwNeMod(r3, r4, 0x40, 0x20), r5out)


    def test_normal_3(self):
        r3 = bytes([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ])

        r4 = bytes([















        ])

        r5 = bytes([
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
            0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50, 0x6c, 0x6f, 0x6f, 0x50,
        ])

        r5out = bytes([

        ])

        self.assertEqual(XeCryptBnQwNeMod(r3, r4, r5, 0x12, 0x10))

    def test_normal_4(self):
        r3 = bytes([

        ])

        r4 = bytes([

        ])

        r5 = bytes([

        ])

        r5out = bytes([

        ])

        self.assertEqual(XeCryptBnQwNeMod(r3, r4, r5, 0x12, 0x10))

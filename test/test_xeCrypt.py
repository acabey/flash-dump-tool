from unittest import TestCase

from Crypto.PublicKey import RSA
from lib.xecrypt import XeCryptBnQw_SwapLeBe, XeCryptBnDw_SwapLeBe, XeCryptBnQw, XeCryptBnQw_toInt
from lib.xecrypt_rsa_new import XeCrypt_RSA


class TestXeCryptBnQw_SwapLeBe(TestCase):

    def test_normal_1(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 1),
            bytes([0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]))

    def test_normal_2(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 3),
            bytes([0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
                   0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
                   0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]))

    def test_zero(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 1),
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))

    def test_one(self):
        self.assertEqual(XeCryptBnQw_SwapLeBe(
        bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 1),
        bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]))

class TestXeCryptBnDw_SwapLeBe(TestCase):

    def test_normal_1(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 2),
            bytes([0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05, ]))

    def test_normal_2(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]), 6),
            bytes([0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05,
                   0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05,
                   0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05]))

    def test_zero(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 2),
            bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))

    def test_one(self):
        self.assertEqual(XeCryptBnDw_SwapLeBe(
            bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 2),
            bytes([0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00]))


class TestXeCryptBnQw(TestCase):

    def test_rsa(self):
        rsa_obj = RSA.generate(1024)

        p_old_bn = XeCryptBnQw(rsa_obj.p, 64)
        self.assertEqual(XeCryptBnQw_toInt(p_old_bn), rsa_obj.p)

        n_old_bn = XeCryptBnQw(rsa_obj.n, 128)
        self.assertEqual(XeCryptBnQw_toInt(n_old_bn), rsa_obj.n)

    def test_xersa(self):
        rsa_obj = RSA.generate(1024)
        xecrypt_obj = XeCrypt_RSA.from_rsa_obj(rsa_obj)

        p_old_bn = XeCryptBnQw(xecrypt_obj.p, 64)
        self.assertEqual(XeCryptBnQw_toInt(p_old_bn), xecrypt_obj.p)

        n_old_bn = XeCryptBnQw(xecrypt_obj.n, 128)
        self.assertEqual(XeCryptBnQw_toInt(n_old_bn), xecrypt_obj.n)

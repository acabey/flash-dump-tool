from unittest import TestCase
from lib.xecrypt import XeCryptRotSumSha
from lib.xecrypt import XeCryptRotSum, RotSumCtx


class TestXeCryptRotSumSha(TestCase):

    def test_normal(self):
        buffer1 = bytearray(0x40)
        for i in range(len(buffer1)):
            buffer1[i] = i % 255

        buffer2 = bytearray(0x40)
        for i in range(len(buffer2)):
            buffer2[i] = 255 - (i % 255)

        digest = bytes([0x31, 0xf0, 0x0b, 0x77, 0x68, 0xf9, 0x57, 0x71, 0x8c, 0x4d, 0x62, 0x84, 0xb3, 0x45, 0xcd, 0xdd, 0x37, 0x9c, 0x6e, 0xe9])
        self.assertEquals(XeCryptRotSumSha(buffer1, buffer2, 0x20), digest)

    def test_input_2_zero(self):
        buffer1 = bytearray(0x40)
        for i in range(len(buffer1)):
            buffer1[i] = i % 255

        buffer2 = bytearray(0x40)

        digest = bytes([0x2a, 0xdb, 0xc2, 0x8c, 0xda, 0xca, 0x48, 0x8e, 0xa5, 0x01, 0x74, 0xa5, 0xd9, 0x80, 0x60, 0xc5, 0xf9, 0x0f, 0x5d, 0x54])
        self.assertEquals(XeCryptRotSumSha(buffer1, buffer2, 0x20), digest)

    def test_input_all_zero(self):
        buffer1 = bytearray(0x40)
        buffer2 = bytearray(0x40)

        digest = bytes([0x37, 0xd3, 0xb6, 0xb8, 0x4e, 0x35, 0x08, 0x0a, 0xe5, 0xf9, 0x60, 0xfd, 0xbf, 0x44, 0x26, 0x06, 0x54, 0x02, 0x7e, 0x5b])
        self.assertEquals(XeCryptRotSumSha(buffer1, buffer2, 0x20), digest)


class TestXeCryptRotSum(TestCase):

    def test_launch_xex(self):

        input_1_size = 0x70
        input_1 = bytearray(
            [0x00, 0x00, 0x01, 0x74, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0xfc, 0xa0, 0x61, 0xd4,
             0xc2, 0xa1, 0x71, 0xc0, 0xec, 0x98, 0x00, 0x86, 0xe6, 0x8b, 0xa8, 0x9f, 0xb0, 0x9c, 0x83, 0xd4,
             0x00, 0x00, 0x00, 0x02, 0x47, 0x88, 0x8f, 0x6a, 0x94, 0x36, 0x58, 0xc0, 0x7a, 0xdf, 0xeb, 0xda,
             0x44, 0x13, 0x4a, 0x7f, 0xe0, 0xd2, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xd8, 0x0b, 0xfa, 0xf3, 0xdc, 0x53, 0xb0,
             0x89, 0x7d, 0x5e, 0xb5, 0x08, 0xd0, 0x10, 0x63, 0x00, 0x00, 0x00, 0x00, 0xca, 0xe2, 0xc7, 0x20,
             0xef, 0xb2, 0x9a, 0x1d, 0x2e, 0x90, 0xe4, 0x7e, 0xb9, 0xdf, 0x41, 0xa0, 0xf5, 0xf5, 0xb7, 0xa4])

        rotsum_ctx = RotSumCtx([0] * 4)

        output = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xb2, 0x51, 0xdc, 0xa2, 0xc4, 0x60, 0xa3, 0x5d,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xd8, 0x2d, 0xc6, 0x4e, 0xec, 0xd3, 0xea, 0x24])

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEquals(bytes(rotsum_ctx), output)

    def test_launch_xex_zero_all(self):

        input_1_size = 0x0
        input_1 = []

        output = bytes([0x0] * 0x20)

        rotsum_ctx = RotSumCtx.from_bytes(output)

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEquals(bytes(rotsum_ctx), output)

    def test_launch_xex_zero_input(self):

        input_1_size = 0x0
        input_1 = []

        output = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xb2, 0x51, 0xdc, 0xa2, 0xc4, 0x60, 0xa3, 0x5d,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xd8, 0x2d, 0xc6, 0x4e, 0xec, 0xd3, 0xea, 0x24])

        rotsum_ctx = RotSumCtx.from_bytes(output)

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEquals(bytes(rotsum_ctx), output)

    def test_normal(self):

        input_1_size = 0x40

        input_1_bytes = bytearray(
            [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
             0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
             0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f])

        input_1 = bytearray(input_1_size)
        for i in range(input_1_size):
            input_1[i] = i % 255

        self.assertEquals(input_1_bytes, input_1)

        rotsum_ctx = RotSumCtx([0] * 4)

        output = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x62, 0xe0, 0xd8, 0xd7, 0xd3, 0xc3, 0x83,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x6d, 0x14, 0x14, 0x14, 0x19, 0x69, 0x69, 0x69])

        XeCryptRotSum(rotsum_ctx, input_1, input_1_size >> 3)

        self.assertEquals(bytes(rotsum_ctx), output)

    def test_normal_2(self):

        input_2_size = 0x40

        input_2_bytes = bytearray(
            [0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
             0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
             0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
             0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0])


        input_2 = bytearray(input_2_size)
        for i in range(input_2_size):
            input_2[i] = 255 - (i % 255)

        self.assertEquals(input_2_bytes, input_2)

        output_1 = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                          0x83, 0x62, 0xe0, 0xd8, 0xd7, 0xd3, 0xc3, 0x83,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb,
                          0x6d, 0x14, 0x14, 0x14, 0x19, 0x69, 0x69, 0x69])

        rotsum_ctx = RotSumCtx.from_bytes(output_1)

        output_2 = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                          0x50, 0x60, 0x61, 0xaa, 0x6a, 0x8b, 0x0d, 0x54,
                          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
                          0x52, 0x59, 0x00, 0x00, 0xa4, 0xb0, 0x00, 0x00])

        XeCryptRotSum(rotsum_ctx, input_2, input_2_size >> 3)

        self.assertEquals(bytes(rotsum_ctx), output_2)
